// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ggsn_define.proto

/*
	Package ggsn is a generated protocol buffer package.

	It is generated from these files:
		ggsn_define.proto

	It has these top-level messages:
		GgsnPdpContext
		QoS
		GtpMessageHeader
		EchoRequest
		EchoResponse
		CreatePdpContextRequest
		CreatePdpContextResponse
		UpdatePdpContextRequest
		UpdatePdpContextResponse
		DeletePdpContextRequest
		DeletePdpContextResponse
*/
package ggsn

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PDPType int32

const (
	IP    PDPType = 0
	PPP   PDPType = 1
	NonIP PDPType = 2
)

var PDPType_name = map[int32]string{
	0: "IP",
	1: "PPP",
	2: "NonIP",
}
var PDPType_value = map[string]int32{
	"IP":    0,
	"PPP":   1,
	"NonIP": 2,
}

func (PDPType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGgsnDefine, []int{0} }

type GTPMessageType int32

const (
	RESERVED                  GTPMessageType = 0
	ECHOREQUEST               GTPMessageType = 1
	ECHORESPONSE              GTPMessageType = 2
	CREATEPDPCONTEXTREQUEST   GTPMessageType = 16
	CREATEPDPCONTEXTRESPONSE  GTPMessageType = 17
	UPDATEPDPCONTEXTREQUEST   GTPMessageType = 18
	UPDATEPDPCONTEXTRESPONSE  GTPMessageType = 19
	DELETEPDPCONTEXTREQUEST   GTPMessageType = 20
	DELETEPDPCONTEXTRESPPONSE GTPMessageType = 21
)

var GTPMessageType_name = map[int32]string{
	0:  "RESERVED",
	1:  "ECHOREQUEST",
	2:  "ECHORESPONSE",
	16: "CREATEPDPCONTEXTREQUEST",
	17: "CREATEPDPCONTEXTRESPONSE",
	18: "UPDATEPDPCONTEXTREQUEST",
	19: "UPDATEPDPCONTEXTRESPONSE",
	20: "DELETEPDPCONTEXTREQUEST",
	21: "DELETEPDPCONTEXTRESPPONSE",
}
var GTPMessageType_value = map[string]int32{
	"RESERVED":                  0,
	"ECHOREQUEST":               1,
	"ECHORESPONSE":              2,
	"CREATEPDPCONTEXTREQUEST":   16,
	"CREATEPDPCONTEXTRESPONSE":  17,
	"UPDATEPDPCONTEXTREQUEST":   18,
	"UPDATEPDPCONTEXTRESPONSE":  19,
	"DELETEPDPCONTEXTREQUEST":   20,
	"DELETEPDPCONTEXTRESPPONSE": 21,
}

func (GTPMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGgsnDefine, []int{1} }

type GgsnPdpContext struct {
	Imsi             string  `protobuf:"bytes,1,opt,name=Imsi,proto3" json:"Imsi,omitempty"`
	ImsiIsAuthInd    bool    `protobuf:"varint,2,opt,name=ImsiIsAuthInd,proto3" json:"ImsiIsAuthInd,omitempty"`
	Imei             string  `protobuf:"bytes,3,opt,name=Imei,proto3" json:"Imei,omitempty"`
	Nsapi            uint32  `protobuf:"varint,4,opt,name=Nsapi,proto3" json:"Nsapi,omitempty"`
	Msisdn           string  `protobuf:"bytes,5,opt,name=Msisdn,proto3" json:"Msisdn,omitempty"`
	PdpType          PDPType `protobuf:"varint,6,opt,name=PdpType,proto3,enum=ggsn.PDPType" json:"PdpType,omitempty"`
	PdpAddress       uint32  `protobuf:"varint,7,opt,name=PdpAddress,proto3" json:"PdpAddress,omitempty"`
	IsDynamicAddress bool    `protobuf:"varint,8,opt,name=IsDynamicAddress,proto3" json:"IsDynamicAddress,omitempty"`
	ApnInUse         string  `protobuf:"bytes,9,opt,name=ApnInUse,proto3" json:"ApnInUse,omitempty"`
	GgsnTeid_C       uint32  `protobuf:"varint,10,opt,name=GgsnTeid_C,json=GgsnTeidC,proto3" json:"GgsnTeid_C,omitempty"`
	GgsnAddress_C    uint32  `protobuf:"varint,11,opt,name=GgsnAddress_C,json=GgsnAddressC,proto3" json:"GgsnAddress_C,omitempty"`
	GgsnTeid_U       uint32  `protobuf:"varint,12,opt,name=GgsnTeid_U,json=GgsnTeidU,proto3" json:"GgsnTeid_U,omitempty"`
	GgsnAddress_U    uint32  `protobuf:"varint,13,opt,name=GgsnAddress_U,json=GgsnAddressU,proto3" json:"GgsnAddress_U,omitempty"`
	SgsnTeid_C       uint32  `protobuf:"varint,14,opt,name=SgsnTeid_C,json=SgsnTeidC,proto3" json:"SgsnTeid_C,omitempty"`
	SgsnAddress_C    uint32  `protobuf:"varint,15,opt,name=SgsnAddress_C,json=SgsnAddressC,proto3" json:"SgsnAddress_C,omitempty"`
	SgsnTeid_U       uint32  `protobuf:"varint,16,opt,name=SgsnTeid_U,json=SgsnTeidU,proto3" json:"SgsnTeid_U,omitempty"`
	SgsnAddress_U    uint32  `protobuf:"varint,17,opt,name=SgsnAddress_U,json=SgsnAddressU,proto3" json:"SgsnAddress_U,omitempty"`
	RecoveryFlag     bool    `protobuf:"varint,18,opt,name=RecoveryFlag,proto3" json:"RecoveryFlag,omitempty"`
	NegotiateQoS     *QoS    `protobuf:"bytes,19,opt,name=NegotiateQoS" json:"NegotiateQoS,omitempty"`
}

func (m *GgsnPdpContext) Reset()                    { *m = GgsnPdpContext{} }
func (*GgsnPdpContext) ProtoMessage()               {}
func (*GgsnPdpContext) Descriptor() ([]byte, []int) { return fileDescriptorGgsnDefine, []int{0} }

func (m *GgsnPdpContext) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *GgsnPdpContext) GetImsiIsAuthInd() bool {
	if m != nil {
		return m.ImsiIsAuthInd
	}
	return false
}

func (m *GgsnPdpContext) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *GgsnPdpContext) GetNsapi() uint32 {
	if m != nil {
		return m.Nsapi
	}
	return 0
}

func (m *GgsnPdpContext) GetMsisdn() string {
	if m != nil {
		return m.Msisdn
	}
	return ""
}

func (m *GgsnPdpContext) GetPdpType() PDPType {
	if m != nil {
		return m.PdpType
	}
	return IP
}

func (m *GgsnPdpContext) GetPdpAddress() uint32 {
	if m != nil {
		return m.PdpAddress
	}
	return 0
}

func (m *GgsnPdpContext) GetIsDynamicAddress() bool {
	if m != nil {
		return m.IsDynamicAddress
	}
	return false
}

func (m *GgsnPdpContext) GetApnInUse() string {
	if m != nil {
		return m.ApnInUse
	}
	return ""
}

func (m *GgsnPdpContext) GetGgsnTeid_C() uint32 {
	if m != nil {
		return m.GgsnTeid_C
	}
	return 0
}

func (m *GgsnPdpContext) GetGgsnAddress_C() uint32 {
	if m != nil {
		return m.GgsnAddress_C
	}
	return 0
}

func (m *GgsnPdpContext) GetGgsnTeid_U() uint32 {
	if m != nil {
		return m.GgsnTeid_U
	}
	return 0
}

func (m *GgsnPdpContext) GetGgsnAddress_U() uint32 {
	if m != nil {
		return m.GgsnAddress_U
	}
	return 0
}

func (m *GgsnPdpContext) GetSgsnTeid_C() uint32 {
	if m != nil {
		return m.SgsnTeid_C
	}
	return 0
}

func (m *GgsnPdpContext) GetSgsnAddress_C() uint32 {
	if m != nil {
		return m.SgsnAddress_C
	}
	return 0
}

func (m *GgsnPdpContext) GetSgsnTeid_U() uint32 {
	if m != nil {
		return m.SgsnTeid_U
	}
	return 0
}

func (m *GgsnPdpContext) GetSgsnAddress_U() uint32 {
	if m != nil {
		return m.SgsnAddress_U
	}
	return 0
}

func (m *GgsnPdpContext) GetRecoveryFlag() bool {
	if m != nil {
		return m.RecoveryFlag
	}
	return false
}

func (m *GgsnPdpContext) GetNegotiateQoS() *QoS {
	if m != nil {
		return m.NegotiateQoS
	}
	return nil
}

type QoS struct {
	MaxULBitRate uint32 `protobuf:"varint,1,opt,name=MaxULBitRate,proto3" json:"MaxULBitRate,omitempty"`
	MaxDLBitRate uint32 `protobuf:"varint,2,opt,name=MaxDLBitRate,proto3" json:"MaxDLBitRate,omitempty"`
}

func (m *QoS) Reset()                    { *m = QoS{} }
func (*QoS) ProtoMessage()               {}
func (*QoS) Descriptor() ([]byte, []int) { return fileDescriptorGgsnDefine, []int{1} }

func (m *QoS) GetMaxULBitRate() uint32 {
	if m != nil {
		return m.MaxULBitRate
	}
	return 0
}

func (m *QoS) GetMaxDLBitRate() uint32 {
	if m != nil {
		return m.MaxDLBitRate
	}
	return 0
}

// Define GTP Header
type GtpMessageHeader struct {
	Flag           uint32         `protobuf:"varint,1,opt,name=Flag,proto3" json:"Flag,omitempty"`
	MessageType    GTPMessageType `protobuf:"varint,2,opt,name=MessageType,proto3,enum=ggsn.GTPMessageType" json:"MessageType,omitempty"`
	Length         uint32         `protobuf:"varint,3,opt,name=Length,proto3" json:"Length,omitempty"`
	Teid           uint32         `protobuf:"varint,4,opt,name=Teid,proto3" json:"Teid,omitempty"`
	SequenceNumber uint32         `protobuf:"varint,5,opt,name=SequenceNumber,proto3" json:"SequenceNumber,omitempty"`
}

func (m *GtpMessageHeader) Reset()                    { *m = GtpMessageHeader{} }
func (*GtpMessageHeader) ProtoMessage()               {}
func (*GtpMessageHeader) Descriptor() ([]byte, []int) { return fileDescriptorGgsnDefine, []int{2} }

func (m *GtpMessageHeader) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *GtpMessageHeader) GetMessageType() GTPMessageType {
	if m != nil {
		return m.MessageType
	}
	return RESERVED
}

func (m *GtpMessageHeader) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *GtpMessageHeader) GetTeid() uint32 {
	if m != nil {
		return m.Teid
	}
	return 0
}

func (m *GtpMessageHeader) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type EchoRequest struct {
	GtpHeader  *GtpMessageHeader `protobuf:"bytes,1,opt,name=GtpHeader" json:"GtpHeader,omitempty"`
	PrivateExt uint64            `protobuf:"varint,255,opt,name=PrivateExt,proto3" json:"PrivateExt,omitempty"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptorGgsnDefine, []int{3} }

func (m *EchoRequest) GetGtpHeader() *GtpMessageHeader {
	if m != nil {
		return m.GtpHeader
	}
	return nil
}

func (m *EchoRequest) GetPrivateExt() uint64 {
	if m != nil {
		return m.PrivateExt
	}
	return 0
}

type EchoResponse struct {
	GtpHeader  *GtpMessageHeader `protobuf:"bytes,1,opt,name=GtpHeader" json:"GtpHeader,omitempty"`
	Recovery   uint32            `protobuf:"varint,14,opt,name=Recovery,proto3" json:"Recovery,omitempty"`
	PrivateExt uint64            `protobuf:"varint,255,opt,name=PrivateExt,proto3" json:"PrivateExt,omitempty"`
}

func (m *EchoResponse) Reset()                    { *m = EchoResponse{} }
func (*EchoResponse) ProtoMessage()               {}
func (*EchoResponse) Descriptor() ([]byte, []int) { return fileDescriptorGgsnDefine, []int{4} }

func (m *EchoResponse) GetGtpHeader() *GtpMessageHeader {
	if m != nil {
		return m.GtpHeader
	}
	return nil
}

func (m *EchoResponse) GetRecovery() uint32 {
	if m != nil {
		return m.Recovery
	}
	return 0
}

func (m *EchoResponse) GetPrivateExt() uint64 {
	if m != nil {
		return m.PrivateExt
	}
	return 0
}

type CreatePdpContextRequest struct {
	GtpHeader     *GtpMessageHeader `protobuf:"bytes,1,opt,name=GtpHeader" json:"GtpHeader,omitempty"`
	Imsi          string            `protobuf:"bytes,2,opt,name=Imsi,proto3" json:"Imsi,omitempty"`
	QoSProfile    *QoS              `protobuf:"bytes,3,opt,name=QoSProfile" json:"QoSProfile,omitempty"`
	Nsapi         uint32            `protobuf:"varint,20,opt,name=Nsapi,proto3" json:"Nsapi,omitempty"`
	SgsnTeid_C    uint32            `protobuf:"varint,16,opt,name=SgsnTeid_C,json=SgsnTeidC,proto3" json:"SgsnTeid_C,omitempty"`
	SgsnAddress_C uint32            `protobuf:"varint,17,opt,name=SgsnAddress_C,json=SgsnAddressC,proto3" json:"SgsnAddress_C,omitempty"`
	SgsnTeid_U    uint32            `protobuf:"varint,18,opt,name=SgsnTeid_U,json=SgsnTeidU,proto3" json:"SgsnTeid_U,omitempty"`
	SgsnAddress_U uint32            `protobuf:"varint,19,opt,name=SgsnAddress_U,json=SgsnAddressU,proto3" json:"SgsnAddress_U,omitempty"`
}

func (m *CreatePdpContextRequest) Reset()      { *m = CreatePdpContextRequest{} }
func (*CreatePdpContextRequest) ProtoMessage() {}
func (*CreatePdpContextRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorGgsnDefine, []int{5}
}

func (m *CreatePdpContextRequest) GetGtpHeader() *GtpMessageHeader {
	if m != nil {
		return m.GtpHeader
	}
	return nil
}

func (m *CreatePdpContextRequest) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *CreatePdpContextRequest) GetQoSProfile() *QoS {
	if m != nil {
		return m.QoSProfile
	}
	return nil
}

func (m *CreatePdpContextRequest) GetNsapi() uint32 {
	if m != nil {
		return m.Nsapi
	}
	return 0
}

func (m *CreatePdpContextRequest) GetSgsnTeid_C() uint32 {
	if m != nil {
		return m.SgsnTeid_C
	}
	return 0
}

func (m *CreatePdpContextRequest) GetSgsnAddress_C() uint32 {
	if m != nil {
		return m.SgsnAddress_C
	}
	return 0
}

func (m *CreatePdpContextRequest) GetSgsnTeid_U() uint32 {
	if m != nil {
		return m.SgsnTeid_U
	}
	return 0
}

func (m *CreatePdpContextRequest) GetSgsnAddress_U() uint32 {
	if m != nil {
		return m.SgsnAddress_U
	}
	return 0
}

type CreatePdpContextResponse struct {
	GtpHeader      *GtpMessageHeader `protobuf:"bytes,1,opt,name=GtpHeader" json:"GtpHeader,omitempty"`
	Cause          uint32            `protobuf:"varint,5,opt,name=Cause,proto3" json:"Cause,omitempty"`
	GgsnTeid_C     uint32            `protobuf:"varint,16,opt,name=GgsnTeid_C,json=GgsnTeidC,proto3" json:"GgsnTeid_C,omitempty"`
	GgsnAddress_C  uint32            `protobuf:"varint,17,opt,name=GgsnAddress_C,json=GgsnAddressC,proto3" json:"GgsnAddress_C,omitempty"`
	GgsnTeid_U     uint32            `protobuf:"varint,18,opt,name=GgsnTeid_U,json=GgsnTeidU,proto3" json:"GgsnTeid_U,omitempty"`
	GgsnAddress_U  uint32            `protobuf:"varint,19,opt,name=GgsnAddress_U,json=GgsnAddressU,proto3" json:"GgsnAddress_U,omitempty"`
	EndUserAddress uint32            `protobuf:"varint,128,opt,name=EndUserAddress,proto3" json:"EndUserAddress,omitempty"`
}

func (m *CreatePdpContextResponse) Reset()      { *m = CreatePdpContextResponse{} }
func (*CreatePdpContextResponse) ProtoMessage() {}
func (*CreatePdpContextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorGgsnDefine, []int{6}
}

func (m *CreatePdpContextResponse) GetGtpHeader() *GtpMessageHeader {
	if m != nil {
		return m.GtpHeader
	}
	return nil
}

func (m *CreatePdpContextResponse) GetCause() uint32 {
	if m != nil {
		return m.Cause
	}
	return 0
}

func (m *CreatePdpContextResponse) GetGgsnTeid_C() uint32 {
	if m != nil {
		return m.GgsnTeid_C
	}
	return 0
}

func (m *CreatePdpContextResponse) GetGgsnAddress_C() uint32 {
	if m != nil {
		return m.GgsnAddress_C
	}
	return 0
}

func (m *CreatePdpContextResponse) GetGgsnTeid_U() uint32 {
	if m != nil {
		return m.GgsnTeid_U
	}
	return 0
}

func (m *CreatePdpContextResponse) GetGgsnAddress_U() uint32 {
	if m != nil {
		return m.GgsnAddress_U
	}
	return 0
}

func (m *CreatePdpContextResponse) GetEndUserAddress() uint32 {
	if m != nil {
		return m.EndUserAddress
	}
	return 0
}

type UpdatePdpContextRequest struct {
	GtpHeader  *GtpMessageHeader `protobuf:"bytes,1,opt,name=GtpHeader" json:"GtpHeader,omitempty"`
	Imsi       string            `protobuf:"bytes,2,opt,name=Imsi,proto3" json:"Imsi,omitempty"`
	QoSProfile *QoS              `protobuf:"bytes,3,opt,name=QoSProfile" json:"QoSProfile,omitempty"`
	Nsapi      uint32            `protobuf:"varint,20,opt,name=Nsapi,proto3" json:"Nsapi,omitempty"`
	Recovery   uint32            `protobuf:"varint,14,opt,name=Recovery,proto3" json:"Recovery,omitempty"`
}

func (m *UpdatePdpContextRequest) Reset()      { *m = UpdatePdpContextRequest{} }
func (*UpdatePdpContextRequest) ProtoMessage() {}
func (*UpdatePdpContextRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorGgsnDefine, []int{7}
}

func (m *UpdatePdpContextRequest) GetGtpHeader() *GtpMessageHeader {
	if m != nil {
		return m.GtpHeader
	}
	return nil
}

func (m *UpdatePdpContextRequest) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *UpdatePdpContextRequest) GetQoSProfile() *QoS {
	if m != nil {
		return m.QoSProfile
	}
	return nil
}

func (m *UpdatePdpContextRequest) GetNsapi() uint32 {
	if m != nil {
		return m.Nsapi
	}
	return 0
}

func (m *UpdatePdpContextRequest) GetRecovery() uint32 {
	if m != nil {
		return m.Recovery
	}
	return 0
}

type UpdatePdpContextResponse struct {
	GtpHeader *GtpMessageHeader `protobuf:"bytes,1,opt,name=GtpHeader" json:"GtpHeader,omitempty"`
	Recovery  uint32            `protobuf:"varint,14,opt,name=Recovery,proto3" json:"Recovery,omitempty"`
	Cause     uint32            `protobuf:"varint,5,opt,name=Cause,proto3" json:"Cause,omitempty"`
}

func (m *UpdatePdpContextResponse) Reset()      { *m = UpdatePdpContextResponse{} }
func (*UpdatePdpContextResponse) ProtoMessage() {}
func (*UpdatePdpContextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorGgsnDefine, []int{8}
}

func (m *UpdatePdpContextResponse) GetGtpHeader() *GtpMessageHeader {
	if m != nil {
		return m.GtpHeader
	}
	return nil
}

func (m *UpdatePdpContextResponse) GetRecovery() uint32 {
	if m != nil {
		return m.Recovery
	}
	return 0
}

func (m *UpdatePdpContextResponse) GetCause() uint32 {
	if m != nil {
		return m.Cause
	}
	return 0
}

type DeletePdpContextRequest struct {
	GtpHeader *GtpMessageHeader `protobuf:"bytes,1,opt,name=GtpHeader" json:"GtpHeader,omitempty"`
	Cause     uint32            `protobuf:"varint,5,opt,name=Cause,proto3" json:"Cause,omitempty"`
	Nsapi     uint32            `protobuf:"varint,20,opt,name=Nsapi,proto3" json:"Nsapi,omitempty"`
}

func (m *DeletePdpContextRequest) Reset()      { *m = DeletePdpContextRequest{} }
func (*DeletePdpContextRequest) ProtoMessage() {}
func (*DeletePdpContextRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorGgsnDefine, []int{9}
}

func (m *DeletePdpContextRequest) GetGtpHeader() *GtpMessageHeader {
	if m != nil {
		return m.GtpHeader
	}
	return nil
}

func (m *DeletePdpContextRequest) GetCause() uint32 {
	if m != nil {
		return m.Cause
	}
	return 0
}

func (m *DeletePdpContextRequest) GetNsapi() uint32 {
	if m != nil {
		return m.Nsapi
	}
	return 0
}

type DeletePdpContextResponse struct {
	GtpHeader *GtpMessageHeader `protobuf:"bytes,1,opt,name=GtpHeader" json:"GtpHeader,omitempty"`
	Cause     uint32            `protobuf:"varint,5,opt,name=Cause,proto3" json:"Cause,omitempty"`
}

func (m *DeletePdpContextResponse) Reset()      { *m = DeletePdpContextResponse{} }
func (*DeletePdpContextResponse) ProtoMessage() {}
func (*DeletePdpContextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorGgsnDefine, []int{10}
}

func (m *DeletePdpContextResponse) GetGtpHeader() *GtpMessageHeader {
	if m != nil {
		return m.GtpHeader
	}
	return nil
}

func (m *DeletePdpContextResponse) GetCause() uint32 {
	if m != nil {
		return m.Cause
	}
	return 0
}

func init() {
	proto.RegisterType((*GgsnPdpContext)(nil), "ggsn.GgsnPdpContext")
	proto.RegisterType((*QoS)(nil), "ggsn.QoS")
	proto.RegisterType((*GtpMessageHeader)(nil), "ggsn.GtpMessageHeader")
	proto.RegisterType((*EchoRequest)(nil), "ggsn.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "ggsn.EchoResponse")
	proto.RegisterType((*CreatePdpContextRequest)(nil), "ggsn.CreatePdpContextRequest")
	proto.RegisterType((*CreatePdpContextResponse)(nil), "ggsn.CreatePdpContextResponse")
	proto.RegisterType((*UpdatePdpContextRequest)(nil), "ggsn.UpdatePdpContextRequest")
	proto.RegisterType((*UpdatePdpContextResponse)(nil), "ggsn.UpdatePdpContextResponse")
	proto.RegisterType((*DeletePdpContextRequest)(nil), "ggsn.DeletePdpContextRequest")
	proto.RegisterType((*DeletePdpContextResponse)(nil), "ggsn.DeletePdpContextResponse")
	proto.RegisterEnum("ggsn.PDPType", PDPType_name, PDPType_value)
	proto.RegisterEnum("ggsn.GTPMessageType", GTPMessageType_name, GTPMessageType_value)
}
func (x PDPType) String() string {
	s, ok := PDPType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GTPMessageType) String() string {
	s, ok := GTPMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GgsnPdpContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GgsnPdpContext)
	if !ok {
		that2, ok := that.(GgsnPdpContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Imsi != that1.Imsi {
		return false
	}
	if this.ImsiIsAuthInd != that1.ImsiIsAuthInd {
		return false
	}
	if this.Imei != that1.Imei {
		return false
	}
	if this.Nsapi != that1.Nsapi {
		return false
	}
	if this.Msisdn != that1.Msisdn {
		return false
	}
	if this.PdpType != that1.PdpType {
		return false
	}
	if this.PdpAddress != that1.PdpAddress {
		return false
	}
	if this.IsDynamicAddress != that1.IsDynamicAddress {
		return false
	}
	if this.ApnInUse != that1.ApnInUse {
		return false
	}
	if this.GgsnTeid_C != that1.GgsnTeid_C {
		return false
	}
	if this.GgsnAddress_C != that1.GgsnAddress_C {
		return false
	}
	if this.GgsnTeid_U != that1.GgsnTeid_U {
		return false
	}
	if this.GgsnAddress_U != that1.GgsnAddress_U {
		return false
	}
	if this.SgsnTeid_C != that1.SgsnTeid_C {
		return false
	}
	if this.SgsnAddress_C != that1.SgsnAddress_C {
		return false
	}
	if this.SgsnTeid_U != that1.SgsnTeid_U {
		return false
	}
	if this.SgsnAddress_U != that1.SgsnAddress_U {
		return false
	}
	if this.RecoveryFlag != that1.RecoveryFlag {
		return false
	}
	if !this.NegotiateQoS.Equal(that1.NegotiateQoS) {
		return false
	}
	return true
}
func (this *QoS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QoS)
	if !ok {
		that2, ok := that.(QoS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxULBitRate != that1.MaxULBitRate {
		return false
	}
	if this.MaxDLBitRate != that1.MaxDLBitRate {
		return false
	}
	return true
}
func (this *GtpMessageHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GtpMessageHeader)
	if !ok {
		that2, ok := that.(GtpMessageHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Flag != that1.Flag {
		return false
	}
	if this.MessageType != that1.MessageType {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	if this.Teid != that1.Teid {
		return false
	}
	if this.SequenceNumber != that1.SequenceNumber {
		return false
	}
	return true
}
func (this *EchoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EchoRequest)
	if !ok {
		that2, ok := that.(EchoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GtpHeader.Equal(that1.GtpHeader) {
		return false
	}
	if this.PrivateExt != that1.PrivateExt {
		return false
	}
	return true
}
func (this *EchoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EchoResponse)
	if !ok {
		that2, ok := that.(EchoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GtpHeader.Equal(that1.GtpHeader) {
		return false
	}
	if this.Recovery != that1.Recovery {
		return false
	}
	if this.PrivateExt != that1.PrivateExt {
		return false
	}
	return true
}
func (this *CreatePdpContextRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreatePdpContextRequest)
	if !ok {
		that2, ok := that.(CreatePdpContextRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GtpHeader.Equal(that1.GtpHeader) {
		return false
	}
	if this.Imsi != that1.Imsi {
		return false
	}
	if !this.QoSProfile.Equal(that1.QoSProfile) {
		return false
	}
	if this.Nsapi != that1.Nsapi {
		return false
	}
	if this.SgsnTeid_C != that1.SgsnTeid_C {
		return false
	}
	if this.SgsnAddress_C != that1.SgsnAddress_C {
		return false
	}
	if this.SgsnTeid_U != that1.SgsnTeid_U {
		return false
	}
	if this.SgsnAddress_U != that1.SgsnAddress_U {
		return false
	}
	return true
}
func (this *CreatePdpContextResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreatePdpContextResponse)
	if !ok {
		that2, ok := that.(CreatePdpContextResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GtpHeader.Equal(that1.GtpHeader) {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if this.GgsnTeid_C != that1.GgsnTeid_C {
		return false
	}
	if this.GgsnAddress_C != that1.GgsnAddress_C {
		return false
	}
	if this.GgsnTeid_U != that1.GgsnTeid_U {
		return false
	}
	if this.GgsnAddress_U != that1.GgsnAddress_U {
		return false
	}
	if this.EndUserAddress != that1.EndUserAddress {
		return false
	}
	return true
}
func (this *UpdatePdpContextRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdatePdpContextRequest)
	if !ok {
		that2, ok := that.(UpdatePdpContextRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GtpHeader.Equal(that1.GtpHeader) {
		return false
	}
	if this.Imsi != that1.Imsi {
		return false
	}
	if !this.QoSProfile.Equal(that1.QoSProfile) {
		return false
	}
	if this.Nsapi != that1.Nsapi {
		return false
	}
	if this.Recovery != that1.Recovery {
		return false
	}
	return true
}
func (this *UpdatePdpContextResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdatePdpContextResponse)
	if !ok {
		that2, ok := that.(UpdatePdpContextResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GtpHeader.Equal(that1.GtpHeader) {
		return false
	}
	if this.Recovery != that1.Recovery {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	return true
}
func (this *DeletePdpContextRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeletePdpContextRequest)
	if !ok {
		that2, ok := that.(DeletePdpContextRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GtpHeader.Equal(that1.GtpHeader) {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if this.Nsapi != that1.Nsapi {
		return false
	}
	return true
}
func (this *DeletePdpContextResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeletePdpContextResponse)
	if !ok {
		that2, ok := that.(DeletePdpContextResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GtpHeader.Equal(that1.GtpHeader) {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	return true
}
func (this *GgsnPdpContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&ggsn.GgsnPdpContext{")
	s = append(s, "Imsi: "+fmt.Sprintf("%#v", this.Imsi)+",\n")
	s = append(s, "ImsiIsAuthInd: "+fmt.Sprintf("%#v", this.ImsiIsAuthInd)+",\n")
	s = append(s, "Imei: "+fmt.Sprintf("%#v", this.Imei)+",\n")
	s = append(s, "Nsapi: "+fmt.Sprintf("%#v", this.Nsapi)+",\n")
	s = append(s, "Msisdn: "+fmt.Sprintf("%#v", this.Msisdn)+",\n")
	s = append(s, "PdpType: "+fmt.Sprintf("%#v", this.PdpType)+",\n")
	s = append(s, "PdpAddress: "+fmt.Sprintf("%#v", this.PdpAddress)+",\n")
	s = append(s, "IsDynamicAddress: "+fmt.Sprintf("%#v", this.IsDynamicAddress)+",\n")
	s = append(s, "ApnInUse: "+fmt.Sprintf("%#v", this.ApnInUse)+",\n")
	s = append(s, "GgsnTeid_C: "+fmt.Sprintf("%#v", this.GgsnTeid_C)+",\n")
	s = append(s, "GgsnAddress_C: "+fmt.Sprintf("%#v", this.GgsnAddress_C)+",\n")
	s = append(s, "GgsnTeid_U: "+fmt.Sprintf("%#v", this.GgsnTeid_U)+",\n")
	s = append(s, "GgsnAddress_U: "+fmt.Sprintf("%#v", this.GgsnAddress_U)+",\n")
	s = append(s, "SgsnTeid_C: "+fmt.Sprintf("%#v", this.SgsnTeid_C)+",\n")
	s = append(s, "SgsnAddress_C: "+fmt.Sprintf("%#v", this.SgsnAddress_C)+",\n")
	s = append(s, "SgsnTeid_U: "+fmt.Sprintf("%#v", this.SgsnTeid_U)+",\n")
	s = append(s, "SgsnAddress_U: "+fmt.Sprintf("%#v", this.SgsnAddress_U)+",\n")
	s = append(s, "RecoveryFlag: "+fmt.Sprintf("%#v", this.RecoveryFlag)+",\n")
	if this.NegotiateQoS != nil {
		s = append(s, "NegotiateQoS: "+fmt.Sprintf("%#v", this.NegotiateQoS)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QoS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ggsn.QoS{")
	s = append(s, "MaxULBitRate: "+fmt.Sprintf("%#v", this.MaxULBitRate)+",\n")
	s = append(s, "MaxDLBitRate: "+fmt.Sprintf("%#v", this.MaxDLBitRate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GtpMessageHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ggsn.GtpMessageHeader{")
	s = append(s, "Flag: "+fmt.Sprintf("%#v", this.Flag)+",\n")
	s = append(s, "MessageType: "+fmt.Sprintf("%#v", this.MessageType)+",\n")
	s = append(s, "Length: "+fmt.Sprintf("%#v", this.Length)+",\n")
	s = append(s, "Teid: "+fmt.Sprintf("%#v", this.Teid)+",\n")
	s = append(s, "SequenceNumber: "+fmt.Sprintf("%#v", this.SequenceNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EchoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ggsn.EchoRequest{")
	if this.GtpHeader != nil {
		s = append(s, "GtpHeader: "+fmt.Sprintf("%#v", this.GtpHeader)+",\n")
	}
	s = append(s, "PrivateExt: "+fmt.Sprintf("%#v", this.PrivateExt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EchoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ggsn.EchoResponse{")
	if this.GtpHeader != nil {
		s = append(s, "GtpHeader: "+fmt.Sprintf("%#v", this.GtpHeader)+",\n")
	}
	s = append(s, "Recovery: "+fmt.Sprintf("%#v", this.Recovery)+",\n")
	s = append(s, "PrivateExt: "+fmt.Sprintf("%#v", this.PrivateExt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreatePdpContextRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&ggsn.CreatePdpContextRequest{")
	if this.GtpHeader != nil {
		s = append(s, "GtpHeader: "+fmt.Sprintf("%#v", this.GtpHeader)+",\n")
	}
	s = append(s, "Imsi: "+fmt.Sprintf("%#v", this.Imsi)+",\n")
	if this.QoSProfile != nil {
		s = append(s, "QoSProfile: "+fmt.Sprintf("%#v", this.QoSProfile)+",\n")
	}
	s = append(s, "Nsapi: "+fmt.Sprintf("%#v", this.Nsapi)+",\n")
	s = append(s, "SgsnTeid_C: "+fmt.Sprintf("%#v", this.SgsnTeid_C)+",\n")
	s = append(s, "SgsnAddress_C: "+fmt.Sprintf("%#v", this.SgsnAddress_C)+",\n")
	s = append(s, "SgsnTeid_U: "+fmt.Sprintf("%#v", this.SgsnTeid_U)+",\n")
	s = append(s, "SgsnAddress_U: "+fmt.Sprintf("%#v", this.SgsnAddress_U)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreatePdpContextResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&ggsn.CreatePdpContextResponse{")
	if this.GtpHeader != nil {
		s = append(s, "GtpHeader: "+fmt.Sprintf("%#v", this.GtpHeader)+",\n")
	}
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	s = append(s, "GgsnTeid_C: "+fmt.Sprintf("%#v", this.GgsnTeid_C)+",\n")
	s = append(s, "GgsnAddress_C: "+fmt.Sprintf("%#v", this.GgsnAddress_C)+",\n")
	s = append(s, "GgsnTeid_U: "+fmt.Sprintf("%#v", this.GgsnTeid_U)+",\n")
	s = append(s, "GgsnAddress_U: "+fmt.Sprintf("%#v", this.GgsnAddress_U)+",\n")
	s = append(s, "EndUserAddress: "+fmt.Sprintf("%#v", this.EndUserAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePdpContextRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ggsn.UpdatePdpContextRequest{")
	if this.GtpHeader != nil {
		s = append(s, "GtpHeader: "+fmt.Sprintf("%#v", this.GtpHeader)+",\n")
	}
	s = append(s, "Imsi: "+fmt.Sprintf("%#v", this.Imsi)+",\n")
	if this.QoSProfile != nil {
		s = append(s, "QoSProfile: "+fmt.Sprintf("%#v", this.QoSProfile)+",\n")
	}
	s = append(s, "Nsapi: "+fmt.Sprintf("%#v", this.Nsapi)+",\n")
	s = append(s, "Recovery: "+fmt.Sprintf("%#v", this.Recovery)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePdpContextResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ggsn.UpdatePdpContextResponse{")
	if this.GtpHeader != nil {
		s = append(s, "GtpHeader: "+fmt.Sprintf("%#v", this.GtpHeader)+",\n")
	}
	s = append(s, "Recovery: "+fmt.Sprintf("%#v", this.Recovery)+",\n")
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeletePdpContextRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ggsn.DeletePdpContextRequest{")
	if this.GtpHeader != nil {
		s = append(s, "GtpHeader: "+fmt.Sprintf("%#v", this.GtpHeader)+",\n")
	}
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	s = append(s, "Nsapi: "+fmt.Sprintf("%#v", this.Nsapi)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeletePdpContextResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ggsn.DeletePdpContextResponse{")
	if this.GtpHeader != nil {
		s = append(s, "GtpHeader: "+fmt.Sprintf("%#v", this.GtpHeader)+",\n")
	}
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGgsnDefine(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GTPService service

type GTPServiceClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	CreatePdpContext(ctx context.Context, in *CreatePdpContextRequest, opts ...grpc.CallOption) (*CreatePdpContextResponse, error)
	UpdatePdpContext(ctx context.Context, in *UpdatePdpContextRequest, opts ...grpc.CallOption) (*UpdatePdpContextResponse, error)
	DeletePdpContext(ctx context.Context, in *DeletePdpContextRequest, opts ...grpc.CallOption) (*DeletePdpContextResponse, error)
}

type gTPServiceClient struct {
	cc *grpc.ClientConn
}

func NewGTPServiceClient(cc *grpc.ClientConn) GTPServiceClient {
	return &gTPServiceClient{cc}
}

func (c *gTPServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/ggsn.GTPService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gTPServiceClient) CreatePdpContext(ctx context.Context, in *CreatePdpContextRequest, opts ...grpc.CallOption) (*CreatePdpContextResponse, error) {
	out := new(CreatePdpContextResponse)
	err := grpc.Invoke(ctx, "/ggsn.GTPService/CreatePdpContext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gTPServiceClient) UpdatePdpContext(ctx context.Context, in *UpdatePdpContextRequest, opts ...grpc.CallOption) (*UpdatePdpContextResponse, error) {
	out := new(UpdatePdpContextResponse)
	err := grpc.Invoke(ctx, "/ggsn.GTPService/UpdatePdpContext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gTPServiceClient) DeletePdpContext(ctx context.Context, in *DeletePdpContextRequest, opts ...grpc.CallOption) (*DeletePdpContextResponse, error) {
	out := new(DeletePdpContextResponse)
	err := grpc.Invoke(ctx, "/ggsn.GTPService/DeletePdpContext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GTPService service

type GTPServiceServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	CreatePdpContext(context.Context, *CreatePdpContextRequest) (*CreatePdpContextResponse, error)
	UpdatePdpContext(context.Context, *UpdatePdpContextRequest) (*UpdatePdpContextResponse, error)
	DeletePdpContext(context.Context, *DeletePdpContextRequest) (*DeletePdpContextResponse, error)
}

func RegisterGTPServiceServer(s *grpc.Server, srv GTPServiceServer) {
	s.RegisterService(&_GTPService_serviceDesc, srv)
}

func _GTPService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GTPServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggsn.GTPService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GTPServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GTPService_CreatePdpContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePdpContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GTPServiceServer).CreatePdpContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggsn.GTPService/CreatePdpContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GTPServiceServer).CreatePdpContext(ctx, req.(*CreatePdpContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GTPService_UpdatePdpContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePdpContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GTPServiceServer).UpdatePdpContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggsn.GTPService/UpdatePdpContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GTPServiceServer).UpdatePdpContext(ctx, req.(*UpdatePdpContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GTPService_DeletePdpContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePdpContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GTPServiceServer).DeletePdpContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggsn.GTPService/DeletePdpContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GTPServiceServer).DeletePdpContext(ctx, req.(*DeletePdpContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GTPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ggsn.GTPService",
	HandlerType: (*GTPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _GTPService_Echo_Handler,
		},
		{
			MethodName: "CreatePdpContext",
			Handler:    _GTPService_CreatePdpContext_Handler,
		},
		{
			MethodName: "UpdatePdpContext",
			Handler:    _GTPService_UpdatePdpContext_Handler,
		},
		{
			MethodName: "DeletePdpContext",
			Handler:    _GTPService_DeletePdpContext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ggsn_define.proto",
}

func (m *GgsnPdpContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GgsnPdpContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Imsi) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(len(m.Imsi)))
		i += copy(dAtA[i:], m.Imsi)
	}
	if m.ImsiIsAuthInd {
		dAtA[i] = 0x10
		i++
		if m.ImsiIsAuthInd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Imei) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(len(m.Imei)))
		i += copy(dAtA[i:], m.Imei)
	}
	if m.Nsapi != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Nsapi))
	}
	if len(m.Msisdn) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(len(m.Msisdn)))
		i += copy(dAtA[i:], m.Msisdn)
	}
	if m.PdpType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.PdpType))
	}
	if m.PdpAddress != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.PdpAddress))
	}
	if m.IsDynamicAddress {
		dAtA[i] = 0x40
		i++
		if m.IsDynamicAddress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ApnInUse) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(len(m.ApnInUse)))
		i += copy(dAtA[i:], m.ApnInUse)
	}
	if m.GgsnTeid_C != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GgsnTeid_C))
	}
	if m.GgsnAddress_C != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GgsnAddress_C))
	}
	if m.GgsnTeid_U != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GgsnTeid_U))
	}
	if m.GgsnAddress_U != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GgsnAddress_U))
	}
	if m.SgsnTeid_C != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.SgsnTeid_C))
	}
	if m.SgsnAddress_C != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.SgsnAddress_C))
	}
	if m.SgsnTeid_U != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.SgsnTeid_U))
	}
	if m.SgsnAddress_U != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.SgsnAddress_U))
	}
	if m.RecoveryFlag {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.RecoveryFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NegotiateQoS != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.NegotiateQoS.Size()))
		n1, err := m.NegotiateQoS.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *QoS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QoS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxULBitRate != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.MaxULBitRate))
	}
	if m.MaxDLBitRate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.MaxDLBitRate))
	}
	return i, nil
}

func (m *GtpMessageHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GtpMessageHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Flag))
	}
	if m.MessageType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.MessageType))
	}
	if m.Length != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Length))
	}
	if m.Teid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Teid))
	}
	if m.SequenceNumber != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.SequenceNumber))
	}
	return i, nil
}

func (m *EchoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GtpHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GtpHeader.Size()))
		n2, err := m.GtpHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.PrivateExt != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.PrivateExt))
	}
	return i, nil
}

func (m *EchoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GtpHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GtpHeader.Size()))
		n3, err := m.GtpHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Recovery != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Recovery))
	}
	if m.PrivateExt != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.PrivateExt))
	}
	return i, nil
}

func (m *CreatePdpContextRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePdpContextRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GtpHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GtpHeader.Size()))
		n4, err := m.GtpHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Imsi) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(len(m.Imsi)))
		i += copy(dAtA[i:], m.Imsi)
	}
	if m.QoSProfile != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.QoSProfile.Size()))
		n5, err := m.QoSProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.SgsnTeid_C != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.SgsnTeid_C))
	}
	if m.SgsnAddress_C != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.SgsnAddress_C))
	}
	if m.SgsnTeid_U != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.SgsnTeid_U))
	}
	if m.SgsnAddress_U != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.SgsnAddress_U))
	}
	if m.Nsapi != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Nsapi))
	}
	return i, nil
}

func (m *CreatePdpContextResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePdpContextResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GtpHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GtpHeader.Size()))
		n6, err := m.GtpHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Cause != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Cause))
	}
	if m.GgsnTeid_C != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GgsnTeid_C))
	}
	if m.GgsnAddress_C != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GgsnAddress_C))
	}
	if m.GgsnTeid_U != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GgsnTeid_U))
	}
	if m.GgsnAddress_U != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GgsnAddress_U))
	}
	if m.EndUserAddress != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x8
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.EndUserAddress))
	}
	return i, nil
}

func (m *UpdatePdpContextRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePdpContextRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GtpHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GtpHeader.Size()))
		n7, err := m.GtpHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Imsi) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(len(m.Imsi)))
		i += copy(dAtA[i:], m.Imsi)
	}
	if m.QoSProfile != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.QoSProfile.Size()))
		n8, err := m.QoSProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Recovery != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Recovery))
	}
	if m.Nsapi != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Nsapi))
	}
	return i, nil
}

func (m *UpdatePdpContextResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePdpContextResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GtpHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GtpHeader.Size()))
		n9, err := m.GtpHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Cause != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Cause))
	}
	if m.Recovery != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Recovery))
	}
	return i, nil
}

func (m *DeletePdpContextRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePdpContextRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GtpHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GtpHeader.Size()))
		n10, err := m.GtpHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Cause != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Cause))
	}
	if m.Nsapi != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Nsapi))
	}
	return i, nil
}

func (m *DeletePdpContextResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePdpContextResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GtpHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.GtpHeader.Size()))
		n11, err := m.GtpHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Cause != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGgsnDefine(dAtA, i, uint64(m.Cause))
	}
	return i, nil
}

func encodeVarintGgsnDefine(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GgsnPdpContext) Size() (n int) {
	var l int
	_ = l
	l = len(m.Imsi)
	if l > 0 {
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.ImsiIsAuthInd {
		n += 2
	}
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.Nsapi != 0 {
		n += 1 + sovGgsnDefine(uint64(m.Nsapi))
	}
	l = len(m.Msisdn)
	if l > 0 {
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.PdpType != 0 {
		n += 1 + sovGgsnDefine(uint64(m.PdpType))
	}
	if m.PdpAddress != 0 {
		n += 1 + sovGgsnDefine(uint64(m.PdpAddress))
	}
	if m.IsDynamicAddress {
		n += 2
	}
	l = len(m.ApnInUse)
	if l > 0 {
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.GgsnTeid_C != 0 {
		n += 1 + sovGgsnDefine(uint64(m.GgsnTeid_C))
	}
	if m.GgsnAddress_C != 0 {
		n += 1 + sovGgsnDefine(uint64(m.GgsnAddress_C))
	}
	if m.GgsnTeid_U != 0 {
		n += 1 + sovGgsnDefine(uint64(m.GgsnTeid_U))
	}
	if m.GgsnAddress_U != 0 {
		n += 1 + sovGgsnDefine(uint64(m.GgsnAddress_U))
	}
	if m.SgsnTeid_C != 0 {
		n += 1 + sovGgsnDefine(uint64(m.SgsnTeid_C))
	}
	if m.SgsnAddress_C != 0 {
		n += 1 + sovGgsnDefine(uint64(m.SgsnAddress_C))
	}
	if m.SgsnTeid_U != 0 {
		n += 2 + sovGgsnDefine(uint64(m.SgsnTeid_U))
	}
	if m.SgsnAddress_U != 0 {
		n += 2 + sovGgsnDefine(uint64(m.SgsnAddress_U))
	}
	if m.RecoveryFlag {
		n += 3
	}
	if m.NegotiateQoS != nil {
		l = m.NegotiateQoS.Size()
		n += 2 + l + sovGgsnDefine(uint64(l))
	}
	return n
}

func (m *QoS) Size() (n int) {
	var l int
	_ = l
	if m.MaxULBitRate != 0 {
		n += 1 + sovGgsnDefine(uint64(m.MaxULBitRate))
	}
	if m.MaxDLBitRate != 0 {
		n += 1 + sovGgsnDefine(uint64(m.MaxDLBitRate))
	}
	return n
}

func (m *GtpMessageHeader) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovGgsnDefine(uint64(m.Flag))
	}
	if m.MessageType != 0 {
		n += 1 + sovGgsnDefine(uint64(m.MessageType))
	}
	if m.Length != 0 {
		n += 1 + sovGgsnDefine(uint64(m.Length))
	}
	if m.Teid != 0 {
		n += 1 + sovGgsnDefine(uint64(m.Teid))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovGgsnDefine(uint64(m.SequenceNumber))
	}
	return n
}

func (m *EchoRequest) Size() (n int) {
	var l int
	_ = l
	if m.GtpHeader != nil {
		l = m.GtpHeader.Size()
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.PrivateExt != 0 {
		n += 2 + sovGgsnDefine(uint64(m.PrivateExt))
	}
	return n
}

func (m *EchoResponse) Size() (n int) {
	var l int
	_ = l
	if m.GtpHeader != nil {
		l = m.GtpHeader.Size()
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.Recovery != 0 {
		n += 1 + sovGgsnDefine(uint64(m.Recovery))
	}
	if m.PrivateExt != 0 {
		n += 2 + sovGgsnDefine(uint64(m.PrivateExt))
	}
	return n
}

func (m *CreatePdpContextRequest) Size() (n int) {
	var l int
	_ = l
	if m.GtpHeader != nil {
		l = m.GtpHeader.Size()
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	l = len(m.Imsi)
	if l > 0 {
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.QoSProfile != nil {
		l = m.QoSProfile.Size()
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.SgsnTeid_C != 0 {
		n += 2 + sovGgsnDefine(uint64(m.SgsnTeid_C))
	}
	if m.SgsnAddress_C != 0 {
		n += 2 + sovGgsnDefine(uint64(m.SgsnAddress_C))
	}
	if m.SgsnTeid_U != 0 {
		n += 2 + sovGgsnDefine(uint64(m.SgsnTeid_U))
	}
	if m.SgsnAddress_U != 0 {
		n += 2 + sovGgsnDefine(uint64(m.SgsnAddress_U))
	}
	if m.Nsapi != 0 {
		n += 2 + sovGgsnDefine(uint64(m.Nsapi))
	}
	return n
}

func (m *CreatePdpContextResponse) Size() (n int) {
	var l int
	_ = l
	if m.GtpHeader != nil {
		l = m.GtpHeader.Size()
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.Cause != 0 {
		n += 1 + sovGgsnDefine(uint64(m.Cause))
	}
	if m.GgsnTeid_C != 0 {
		n += 2 + sovGgsnDefine(uint64(m.GgsnTeid_C))
	}
	if m.GgsnAddress_C != 0 {
		n += 2 + sovGgsnDefine(uint64(m.GgsnAddress_C))
	}
	if m.GgsnTeid_U != 0 {
		n += 2 + sovGgsnDefine(uint64(m.GgsnTeid_U))
	}
	if m.GgsnAddress_U != 0 {
		n += 2 + sovGgsnDefine(uint64(m.GgsnAddress_U))
	}
	if m.EndUserAddress != 0 {
		n += 2 + sovGgsnDefine(uint64(m.EndUserAddress))
	}
	return n
}

func (m *UpdatePdpContextRequest) Size() (n int) {
	var l int
	_ = l
	if m.GtpHeader != nil {
		l = m.GtpHeader.Size()
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	l = len(m.Imsi)
	if l > 0 {
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.QoSProfile != nil {
		l = m.QoSProfile.Size()
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.Recovery != 0 {
		n += 1 + sovGgsnDefine(uint64(m.Recovery))
	}
	if m.Nsapi != 0 {
		n += 2 + sovGgsnDefine(uint64(m.Nsapi))
	}
	return n
}

func (m *UpdatePdpContextResponse) Size() (n int) {
	var l int
	_ = l
	if m.GtpHeader != nil {
		l = m.GtpHeader.Size()
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.Cause != 0 {
		n += 1 + sovGgsnDefine(uint64(m.Cause))
	}
	if m.Recovery != 0 {
		n += 1 + sovGgsnDefine(uint64(m.Recovery))
	}
	return n
}

func (m *DeletePdpContextRequest) Size() (n int) {
	var l int
	_ = l
	if m.GtpHeader != nil {
		l = m.GtpHeader.Size()
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.Cause != 0 {
		n += 1 + sovGgsnDefine(uint64(m.Cause))
	}
	if m.Nsapi != 0 {
		n += 2 + sovGgsnDefine(uint64(m.Nsapi))
	}
	return n
}

func (m *DeletePdpContextResponse) Size() (n int) {
	var l int
	_ = l
	if m.GtpHeader != nil {
		l = m.GtpHeader.Size()
		n += 1 + l + sovGgsnDefine(uint64(l))
	}
	if m.Cause != 0 {
		n += 1 + sovGgsnDefine(uint64(m.Cause))
	}
	return n
}

func sovGgsnDefine(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGgsnDefine(x uint64) (n int) {
	return sovGgsnDefine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GgsnPdpContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GgsnPdpContext{`,
		`Imsi:` + fmt.Sprintf("%v", this.Imsi) + `,`,
		`ImsiIsAuthInd:` + fmt.Sprintf("%v", this.ImsiIsAuthInd) + `,`,
		`Imei:` + fmt.Sprintf("%v", this.Imei) + `,`,
		`Nsapi:` + fmt.Sprintf("%v", this.Nsapi) + `,`,
		`Msisdn:` + fmt.Sprintf("%v", this.Msisdn) + `,`,
		`PdpType:` + fmt.Sprintf("%v", this.PdpType) + `,`,
		`PdpAddress:` + fmt.Sprintf("%v", this.PdpAddress) + `,`,
		`IsDynamicAddress:` + fmt.Sprintf("%v", this.IsDynamicAddress) + `,`,
		`ApnInUse:` + fmt.Sprintf("%v", this.ApnInUse) + `,`,
		`GgsnTeid_C:` + fmt.Sprintf("%v", this.GgsnTeid_C) + `,`,
		`GgsnAddress_C:` + fmt.Sprintf("%v", this.GgsnAddress_C) + `,`,
		`GgsnTeid_U:` + fmt.Sprintf("%v", this.GgsnTeid_U) + `,`,
		`GgsnAddress_U:` + fmt.Sprintf("%v", this.GgsnAddress_U) + `,`,
		`SgsnTeid_C:` + fmt.Sprintf("%v", this.SgsnTeid_C) + `,`,
		`SgsnAddress_C:` + fmt.Sprintf("%v", this.SgsnAddress_C) + `,`,
		`SgsnTeid_U:` + fmt.Sprintf("%v", this.SgsnTeid_U) + `,`,
		`SgsnAddress_U:` + fmt.Sprintf("%v", this.SgsnAddress_U) + `,`,
		`RecoveryFlag:` + fmt.Sprintf("%v", this.RecoveryFlag) + `,`,
		`NegotiateQoS:` + strings.Replace(fmt.Sprintf("%v", this.NegotiateQoS), "QoS", "QoS", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QoS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QoS{`,
		`MaxULBitRate:` + fmt.Sprintf("%v", this.MaxULBitRate) + `,`,
		`MaxDLBitRate:` + fmt.Sprintf("%v", this.MaxDLBitRate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GtpMessageHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GtpMessageHeader{`,
		`Flag:` + fmt.Sprintf("%v", this.Flag) + `,`,
		`MessageType:` + fmt.Sprintf("%v", this.MessageType) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`Teid:` + fmt.Sprintf("%v", this.Teid) + `,`,
		`SequenceNumber:` + fmt.Sprintf("%v", this.SequenceNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EchoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EchoRequest{`,
		`GtpHeader:` + strings.Replace(fmt.Sprintf("%v", this.GtpHeader), "GtpMessageHeader", "GtpMessageHeader", 1) + `,`,
		`PrivateExt:` + fmt.Sprintf("%v", this.PrivateExt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EchoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EchoResponse{`,
		`GtpHeader:` + strings.Replace(fmt.Sprintf("%v", this.GtpHeader), "GtpMessageHeader", "GtpMessageHeader", 1) + `,`,
		`Recovery:` + fmt.Sprintf("%v", this.Recovery) + `,`,
		`PrivateExt:` + fmt.Sprintf("%v", this.PrivateExt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePdpContextRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePdpContextRequest{`,
		`GtpHeader:` + strings.Replace(fmt.Sprintf("%v", this.GtpHeader), "GtpMessageHeader", "GtpMessageHeader", 1) + `,`,
		`Imsi:` + fmt.Sprintf("%v", this.Imsi) + `,`,
		`QoSProfile:` + strings.Replace(fmt.Sprintf("%v", this.QoSProfile), "QoS", "QoS", 1) + `,`,
		`SgsnTeid_C:` + fmt.Sprintf("%v", this.SgsnTeid_C) + `,`,
		`SgsnAddress_C:` + fmt.Sprintf("%v", this.SgsnAddress_C) + `,`,
		`SgsnTeid_U:` + fmt.Sprintf("%v", this.SgsnTeid_U) + `,`,
		`SgsnAddress_U:` + fmt.Sprintf("%v", this.SgsnAddress_U) + `,`,
		`Nsapi:` + fmt.Sprintf("%v", this.Nsapi) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePdpContextResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePdpContextResponse{`,
		`GtpHeader:` + strings.Replace(fmt.Sprintf("%v", this.GtpHeader), "GtpMessageHeader", "GtpMessageHeader", 1) + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`GgsnTeid_C:` + fmt.Sprintf("%v", this.GgsnTeid_C) + `,`,
		`GgsnAddress_C:` + fmt.Sprintf("%v", this.GgsnAddress_C) + `,`,
		`GgsnTeid_U:` + fmt.Sprintf("%v", this.GgsnTeid_U) + `,`,
		`GgsnAddress_U:` + fmt.Sprintf("%v", this.GgsnAddress_U) + `,`,
		`EndUserAddress:` + fmt.Sprintf("%v", this.EndUserAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePdpContextRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePdpContextRequest{`,
		`GtpHeader:` + strings.Replace(fmt.Sprintf("%v", this.GtpHeader), "GtpMessageHeader", "GtpMessageHeader", 1) + `,`,
		`Imsi:` + fmt.Sprintf("%v", this.Imsi) + `,`,
		`QoSProfile:` + strings.Replace(fmt.Sprintf("%v", this.QoSProfile), "QoS", "QoS", 1) + `,`,
		`Recovery:` + fmt.Sprintf("%v", this.Recovery) + `,`,
		`Nsapi:` + fmt.Sprintf("%v", this.Nsapi) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePdpContextResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePdpContextResponse{`,
		`GtpHeader:` + strings.Replace(fmt.Sprintf("%v", this.GtpHeader), "GtpMessageHeader", "GtpMessageHeader", 1) + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`Recovery:` + fmt.Sprintf("%v", this.Recovery) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeletePdpContextRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeletePdpContextRequest{`,
		`GtpHeader:` + strings.Replace(fmt.Sprintf("%v", this.GtpHeader), "GtpMessageHeader", "GtpMessageHeader", 1) + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`Nsapi:` + fmt.Sprintf("%v", this.Nsapi) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeletePdpContextResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeletePdpContextResponse{`,
		`GtpHeader:` + strings.Replace(fmt.Sprintf("%v", this.GtpHeader), "GtpMessageHeader", "GtpMessageHeader", 1) + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGgsnDefine(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GgsnPdpContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GgsnPdpContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GgsnPdpContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imsi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imsi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImsiIsAuthInd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImsiIsAuthInd = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nsapi", wireType)
			}
			m.Nsapi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nsapi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msisdn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msisdn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdpType", wireType)
			}
			m.PdpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PdpType |= (PDPType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdpAddress", wireType)
			}
			m.PdpAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PdpAddress |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDynamicAddress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDynamicAddress = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApnInUse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApnInUse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GgsnTeid_C", wireType)
			}
			m.GgsnTeid_C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GgsnTeid_C |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GgsnAddress_C", wireType)
			}
			m.GgsnAddress_C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GgsnAddress_C |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GgsnTeid_U", wireType)
			}
			m.GgsnTeid_U = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GgsnTeid_U |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GgsnAddress_U", wireType)
			}
			m.GgsnAddress_U = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GgsnAddress_U |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgsnTeid_C", wireType)
			}
			m.SgsnTeid_C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgsnTeid_C |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgsnAddress_C", wireType)
			}
			m.SgsnAddress_C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgsnAddress_C |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgsnTeid_U", wireType)
			}
			m.SgsnTeid_U = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgsnTeid_U |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgsnAddress_U", wireType)
			}
			m.SgsnAddress_U = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgsnAddress_U |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecoveryFlag = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NegotiateQoS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NegotiateQoS == nil {
				m.NegotiateQoS = &QoS{}
			}
			if err := m.NegotiateQoS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGgsnDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QoS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QoS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QoS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxULBitRate", wireType)
			}
			m.MaxULBitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxULBitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDLBitRate", wireType)
			}
			m.MaxDLBitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDLBitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGgsnDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GtpMessageHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GtpMessageHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GtpMessageHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= (GTPMessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teid", wireType)
			}
			m.Teid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Teid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGgsnDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtpHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GtpHeader == nil {
				m.GtpHeader = &GtpMessageHeader{}
			}
			if err := m.GtpHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 255:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateExt", wireType)
			}
			m.PrivateExt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivateExt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGgsnDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtpHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GtpHeader == nil {
				m.GtpHeader = &GtpMessageHeader{}
			}
			if err := m.GtpHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recovery", wireType)
			}
			m.Recovery = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Recovery |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 255:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateExt", wireType)
			}
			m.PrivateExt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivateExt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGgsnDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePdpContextRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePdpContextRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePdpContextRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtpHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GtpHeader == nil {
				m.GtpHeader = &GtpMessageHeader{}
			}
			if err := m.GtpHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imsi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imsi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QoSProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QoSProfile == nil {
				m.QoSProfile = &QoS{}
			}
			if err := m.QoSProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgsnTeid_C", wireType)
			}
			m.SgsnTeid_C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgsnTeid_C |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgsnAddress_C", wireType)
			}
			m.SgsnAddress_C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgsnAddress_C |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgsnTeid_U", wireType)
			}
			m.SgsnTeid_U = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgsnTeid_U |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgsnAddress_U", wireType)
			}
			m.SgsnAddress_U = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgsnAddress_U |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nsapi", wireType)
			}
			m.Nsapi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nsapi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGgsnDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePdpContextResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePdpContextResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePdpContextResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtpHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GtpHeader == nil {
				m.GtpHeader = &GtpMessageHeader{}
			}
			if err := m.GtpHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GgsnTeid_C", wireType)
			}
			m.GgsnTeid_C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GgsnTeid_C |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GgsnAddress_C", wireType)
			}
			m.GgsnAddress_C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GgsnAddress_C |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GgsnTeid_U", wireType)
			}
			m.GgsnTeid_U = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GgsnTeid_U |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GgsnAddress_U", wireType)
			}
			m.GgsnAddress_U = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GgsnAddress_U |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 128:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndUserAddress", wireType)
			}
			m.EndUserAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndUserAddress |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGgsnDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePdpContextRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePdpContextRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePdpContextRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtpHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GtpHeader == nil {
				m.GtpHeader = &GtpMessageHeader{}
			}
			if err := m.GtpHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imsi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imsi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QoSProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QoSProfile == nil {
				m.QoSProfile = &QoS{}
			}
			if err := m.QoSProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recovery", wireType)
			}
			m.Recovery = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Recovery |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nsapi", wireType)
			}
			m.Nsapi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nsapi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGgsnDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePdpContextResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePdpContextResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePdpContextResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtpHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GtpHeader == nil {
				m.GtpHeader = &GtpMessageHeader{}
			}
			if err := m.GtpHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recovery", wireType)
			}
			m.Recovery = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Recovery |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGgsnDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePdpContextRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePdpContextRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePdpContextRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtpHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GtpHeader == nil {
				m.GtpHeader = &GtpMessageHeader{}
			}
			if err := m.GtpHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nsapi", wireType)
			}
			m.Nsapi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nsapi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGgsnDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePdpContextResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePdpContextResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePdpContextResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtpHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GtpHeader == nil {
				m.GtpHeader = &GtpMessageHeader{}
			}
			if err := m.GtpHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGgsnDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGgsnDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGgsnDefine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGgsnDefine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGgsnDefine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGgsnDefine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGgsnDefine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGgsnDefine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGgsnDefine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGgsnDefine   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ggsn_define.proto", fileDescriptorGgsnDefine) }

var fileDescriptorGgsnDefine = []byte{
	// 998 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0xe3, 0x54,
	0x14, 0xce, 0x75, 0x93, 0x36, 0x39, 0xf9, 0x19, 0xe7, 0x36, 0x4c, 0x2f, 0x85, 0x9a, 0xc8, 0xfc,
	0x4c, 0xa8, 0xa0, 0x48, 0x05, 0xb1, 0xef, 0x38, 0x26, 0x13, 0xa9, 0x4d, 0x1d, 0x3b, 0x46, 0xec,
	0x2a, 0x4f, 0x7c, 0x9b, 0x5a, 0x6a, 0x6d, 0x63, 0xbb, 0x55, 0x2b, 0x36, 0x85, 0x27, 0x60, 0xc7,
	0x2b, 0xb0, 0x60, 0xc5, 0x9a, 0x05, 0x4b, 0x96, 0xb3, 0x64, 0x49, 0xc3, 0x86, 0xe5, 0x48, 0x3c,
	0x00, 0xc8, 0xd7, 0x76, 0x6a, 0x3b, 0xc9, 0x44, 0x62, 0x06, 0x69, 0x56, 0xf1, 0xfd, 0xce, 0x39,
	0xdf, 0xfd, 0x7c, 0xfe, 0x62, 0x68, 0x4e, 0x26, 0xbe, 0x7d, 0x62, 0xd2, 0x53, 0xcb, 0xa6, 0x7b,
	0xae, 0xe7, 0x04, 0x0e, 0x2e, 0x86, 0x90, 0x78, 0x5b, 0x82, 0x46, 0x6f, 0xe2, 0xdb, 0x8a, 0xe9,
	0x4a, 0x8e, 0x1d, 0xd0, 0xeb, 0x00, 0x63, 0x28, 0xf6, 0x2f, 0x7c, 0x8b, 0xa0, 0x36, 0xea, 0x54,
	0x54, 0xf6, 0x8c, 0xdf, 0x83, 0x7a, 0xf8, 0xdb, 0xf7, 0x0f, 0x2e, 0x83, 0xb3, 0xbe, 0x6d, 0x12,
	0xae, 0x8d, 0x3a, 0x65, 0x35, 0x0b, 0x46, 0x91, 0xd4, 0x22, 0x6b, 0x49, 0x24, 0xb5, 0x70, 0x0b,
	0x4a, 0x03, 0xdf, 0x70, 0x2d, 0x52, 0x6c, 0xa3, 0x4e, 0x5d, 0x8d, 0x0e, 0xf8, 0x21, 0xac, 0x1f,
	0xf9, 0x96, 0x6f, 0xda, 0xa4, 0xc4, 0x7c, 0xe3, 0x13, 0x7e, 0x04, 0x1b, 0x8a, 0xe9, 0x8e, 0x6e,
	0x5c, 0x4a, 0xd6, 0xdb, 0xa8, 0xd3, 0xd8, 0xaf, 0xef, 0x85, 0x32, 0xf7, 0x94, 0xae, 0x12, 0x82,
	0x6a, 0x62, 0xc5, 0x02, 0x80, 0x62, 0xba, 0x07, 0xa6, 0xe9, 0x51, 0xdf, 0x27, 0x1b, 0x8c, 0x3b,
	0x85, 0xe0, 0x5d, 0xe0, 0xfb, 0x7e, 0xf7, 0xc6, 0x36, 0x2e, 0xac, 0x71, 0xe2, 0x55, 0x66, 0x9a,
	0xe7, 0x70, 0xbc, 0x0d, 0xe5, 0x03, 0xd7, 0xee, 0xdb, 0xba, 0x4f, 0x49, 0x85, 0xc9, 0x99, 0x9d,
	0xf1, 0x0e, 0x40, 0x98, 0x9e, 0x11, 0xb5, 0xcc, 0x13, 0x89, 0x00, 0xbb, 0xa7, 0x92, 0x20, 0x12,
	0x7e, 0x17, 0xea, 0xe1, 0x21, 0x66, 0x3a, 0x91, 0x48, 0x95, 0x79, 0xd4, 0x52, 0xa0, 0x94, 0xe1,
	0xd0, 0x49, 0x2d, 0xcb, 0xa1, 0xe7, 0x39, 0x74, 0x52, 0x9f, 0xe3, 0xd0, 0x43, 0x0e, 0xed, 0x5e,
	0x47, 0x23, 0xe2, 0xd0, 0xd2, 0x3a, 0xb4, 0x8c, 0x8e, 0x07, 0x11, 0x87, 0x96, 0xd3, 0xa1, 0xdd,
	0xeb, 0xe0, 0xb3, 0x1c, 0x7a, 0x9e, 0x43, 0x27, 0xcd, 0x39, 0x0e, 0x1d, 0x8b, 0x50, 0x53, 0xe9,
	0xd8, 0xb9, 0xa2, 0xde, 0xcd, 0x17, 0xe7, 0xc6, 0x84, 0x60, 0x96, 0xd3, 0x0c, 0x86, 0x3f, 0x86,
	0xda, 0x80, 0x4e, 0x9c, 0xc0, 0x32, 0x02, 0x3a, 0x74, 0x34, 0xb2, 0xd9, 0x46, 0x9d, 0xea, 0x7e,
	0x25, 0xaa, 0xe4, 0xd0, 0xd1, 0xd4, 0x8c, 0x59, 0x3c, 0x82, 0xb5, 0xa1, 0xa3, 0x85, 0xcc, 0x47,
	0xc6, 0xb5, 0x7e, 0xf8, 0xd8, 0x0a, 0x54, 0x23, 0xa0, 0xac, 0xfd, 0xea, 0x6a, 0x06, 0x8b, 0x7d,
	0xba, 0x33, 0x1f, 0x6e, 0xe6, 0x33, 0xc3, 0xc4, 0x9f, 0x11, 0xf0, 0xbd, 0xc0, 0x3d, 0xa2, 0xbe,
	0x6f, 0x4c, 0xe8, 0x13, 0x6a, 0x98, 0xd4, 0x0b, 0x3b, 0x93, 0xc9, 0x8d, 0x48, 0xd9, 0x33, 0xfe,
	0x1c, 0xaa, 0xb1, 0x13, 0xeb, 0x37, 0x8e, 0xf5, 0x5b, 0x2b, 0x52, 0xd9, 0x1b, 0x29, 0x29, 0x9b,
	0x9a, 0x76, 0x0c, 0x7b, 0xf7, 0x90, 0xda, 0x93, 0xe0, 0x8c, 0xf5, 0x79, 0x5d, 0x8d, 0x4f, 0xe1,
	0x1d, 0x61, 0x22, 0xe3, 0x46, 0x67, 0xcf, 0xf8, 0x03, 0x68, 0x68, 0xf4, 0xeb, 0x4b, 0x6a, 0x8f,
	0xe9, 0xe0, 0xf2, 0xe2, 0x29, 0xf5, 0x58, 0xbf, 0xd7, 0xd5, 0x1c, 0x2a, 0x9a, 0x50, 0x95, 0xc7,
	0x67, 0x8e, 0x1a, 0xa2, 0x7e, 0x80, 0x3f, 0x83, 0x4a, 0x2f, 0x70, 0x23, 0xed, 0x4c, 0x73, 0x75,
	0xff, 0x61, 0x2c, 0x2c, 0xf7, 0x66, 0xea, 0xbd, 0x23, 0x7e, 0x07, 0x40, 0xf1, 0xac, 0x2b, 0x23,
	0xa0, 0xf2, 0x75, 0x40, 0xfe, 0x09, 0xe3, 0x8a, 0x6a, 0x0a, 0x12, 0xbf, 0x45, 0x50, 0x8b, 0xae,
	0xf1, 0x5d, 0xc7, 0xf6, 0xe9, 0x7f, 0xbc, 0x67, 0x1b, 0xca, 0x49, 0xbd, 0xe3, 0x4e, 0x9c, 0x9d,
	0x57, 0x6b, 0xf8, 0x89, 0x83, 0x2d, 0xc9, 0xa3, 0x46, 0x40, 0xef, 0x57, 0xce, 0xcb, 0xbd, 0x76,
	0xb2, 0xaf, 0xb8, 0xd4, 0xbe, 0xfa, 0x10, 0x60, 0xe8, 0x68, 0x8a, 0xe7, 0x9c, 0x5a, 0xe7, 0x94,
	0xd5, 0x29, 0xd3, 0x80, 0x29, 0x63, 0x6e, 0xb2, 0xf8, 0x95, 0x93, 0xd5, 0x5c, 0x39, 0x59, 0x78,
	0xe5, 0x64, 0x6d, 0x2e, 0x98, 0xac, 0xd9, 0xa2, 0x6c, 0xa5, 0x16, 0xa5, 0xf8, 0x03, 0x07, 0x64,
	0x3e, 0x5d, 0x2f, 0x55, 0xbe, 0x16, 0x94, 0x24, 0xe3, 0xd2, 0xa7, 0x71, 0x2b, 0x46, 0x87, 0xdc,
	0xa2, 0xe3, 0x57, 0x2e, 0xba, 0xe6, 0xca, 0x45, 0x87, 0x57, 0x2e, 0xba, 0xcd, 0x05, 0x8b, 0xee,
	0x11, 0x34, 0x64, 0xdb, 0xd4, 0x7d, 0xea, 0x25, 0x6b, 0xfb, 0x36, 0x1a, 0xda, 0x1c, 0x2c, 0xfe,
	0x8a, 0x60, 0x4b, 0x77, 0xcd, 0xd7, 0xa7, 0x91, 0x5e, 0x34, 0x16, 0x8b, 0x8b, 0xfb, 0x1d, 0x02,
	0x32, 0xff, 0x0a, 0xff, 0x43, 0x71, 0x5f, 0x20, 0x4d, 0xfc, 0x06, 0xb6, 0xba, 0xf4, 0x9c, 0xbe,
	0xba, 0x34, 0x2e, 0x96, 0xb0, 0x38, 0x03, 0xa7, 0x40, 0xe6, 0x2f, 0x7f, 0xf5, 0x09, 0xd8, 0x7d,
	0x1f, 0x36, 0xe2, 0x4f, 0x08, 0xbc, 0x0e, 0x5c, 0x5f, 0xe1, 0x0b, 0x78, 0x03, 0xd6, 0x14, 0x45,
	0xe1, 0x11, 0xae, 0x40, 0x69, 0xe0, 0xd8, 0x7d, 0x85, 0xe7, 0x76, 0xff, 0x46, 0xd0, 0xc8, 0xae,
	0x7e, 0x5c, 0x83, 0xb2, 0x2a, 0x6b, 0xb2, 0xfa, 0xa5, 0xdc, 0xe5, 0x0b, 0xf8, 0x01, 0x54, 0x65,
	0xe9, 0xc9, 0xb1, 0x2a, 0x0f, 0x75, 0x59, 0x1b, 0xf1, 0x08, 0xf3, 0x50, 0x8b, 0x00, 0x4d, 0x39,
	0x1e, 0x68, 0x32, 0xcf, 0xe1, 0xb7, 0x60, 0x4b, 0x52, 0xe5, 0x83, 0x91, 0xac, 0x74, 0x15, 0xe9,
	0x78, 0x30, 0x92, 0xbf, 0x1a, 0x25, 0xee, 0x3c, 0x7e, 0x1b, 0xc8, 0xbc, 0x31, 0x0e, 0x6d, 0x86,
	0xa1, 0xba, 0xd2, 0x5d, 0x18, 0x8a, 0xc3, 0xd0, 0x79, 0x63, 0x1c, 0xba, 0x19, 0x86, 0x76, 0xe5,
	0x43, 0x79, 0x51, 0x68, 0x0b, 0xef, 0xc0, 0x9b, 0xf3, 0x46, 0x4d, 0x89, 0x62, 0xdf, 0xd8, 0xff,
	0x85, 0x03, 0xe8, 0x8d, 0x14, 0x8d, 0x7a, 0x57, 0xd6, 0x98, 0xe2, 0x4f, 0xa0, 0x18, 0xfe, 0x49,
	0xe0, 0x66, 0x94, 0xec, 0xd4, 0xff, 0xd2, 0x36, 0x4e, 0x43, 0x51, 0x99, 0xc4, 0x02, 0xd6, 0x80,
	0xcf, 0xaf, 0x28, 0xbc, 0x13, 0x79, 0x2e, 0xd9, 0xf4, 0xdb, 0xc2, 0x32, 0x73, 0x9a, 0x34, 0x3f,
	0x1a, 0x09, 0xe9, 0x92, 0xa9, 0x4f, 0x48, 0x97, 0x4d, 0x54, 0x44, 0x9a, 0x6f, 0xb7, 0x84, 0x74,
	0xc9, 0x0c, 0x24, 0xa4, 0xcb, 0xba, 0x54, 0x2c, 0x3c, 0xfe, 0xe8, 0xd9, 0x9d, 0x50, 0xf8, 0xfd,
	0x4e, 0x28, 0x3c, 0xbf, 0x13, 0xd0, 0xed, 0x54, 0x40, 0x3f, 0x4e, 0x05, 0xf4, 0xdb, 0x54, 0x40,
	0xcf, 0xa6, 0x02, 0xfa, 0x63, 0x2a, 0xa0, 0xbf, 0xa6, 0x42, 0xe1, 0xf9, 0x54, 0x40, 0xdf, 0xff,
	0x29, 0x14, 0x9e, 0xae, 0xb3, 0xaf, 0xef, 0x4f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xa8,
	0x04, 0x7b, 0x92, 0x0b, 0x00, 0x00,
}
